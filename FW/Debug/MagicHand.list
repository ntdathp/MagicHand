
MagicHand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e50  08004e50  00005e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e58  08004e58  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e58  08004e58  00005e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004e60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000001c4  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5e3  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b44  00000000  00000000  00011623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  00013168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000819  00000000  00000000  00013bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020658  00000000  00000000  000143d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d23f  00000000  00000000  00034a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5357  00000000  00000000  00041c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106fc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cf8  00000000  00000000  0010700c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00109d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e20 	.word	0x08004e20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004e20 	.word	0x08004e20

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <process_received_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_received_data()
	  {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
	      if (uart_received_flag)
 8000e4a:	4b40      	ldr	r3, [pc, #256]	@ (8000f4c <process_received_data+0x108>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d078      	beq.n	8000f44 <process_received_data+0x100>
	      {
	          uart_received_flag = 0;  // Xóa cờ
 8000e52:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <process_received_data+0x108>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

	          int finger_index = 0;  // Chỉ số ngón tay (0 đến 4)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
	          int value = -1;        // Giá trị điều khiển (1: lên, 0: xuống)
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	603b      	str	r3, [r7, #0]

	          // Duyệt qua từng ký tự trong chuỗi nhận được
	          for (char *ptr = uart_rx_buffer; *ptr != '\0'; ptr++)
 8000e62:	4b3b      	ldr	r3, [pc, #236]	@ (8000f50 <process_received_data+0x10c>)
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	e059      	b.n	8000f1c <process_received_data+0xd8>
	          {
	              if (*ptr >= '0' && *ptr <= '1') // Kiểm tra ký tự là '0' hoặc '1'
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e6e:	d952      	bls.n	8000f16 <process_received_data+0xd2>
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b31      	cmp	r3, #49	@ 0x31
 8000e76:	d84e      	bhi.n	8000f16 <process_received_data+0xd2>
	              {
	                  value = *ptr - '0';  // Chuyển ký tự thành số nguyên
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	3b30      	subs	r3, #48	@ 0x30
 8000e7e:	603b      	str	r3, [r7, #0]

	                  // Điều khiển servo dựa trên giá trị
	                  if (value == 1)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d11f      	bne.n	8000ec6 <process_received_data+0x82>
	                  {
	                      switch (finger_index)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d83e      	bhi.n	8000f0a <process_received_data+0xc6>
 8000e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e94 <process_received_data+0x50>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ea9 	.word	0x08000ea9
 8000e98:	08000eaf 	.word	0x08000eaf
 8000e9c:	08000eb5 	.word	0x08000eb5
 8000ea0:	08000ebb 	.word	0x08000ebb
 8000ea4:	08000ec1 	.word	0x08000ec1
	                      {
	                          case 0: finger0_up(); break;
 8000ea8:	f000 f860 	bl	8000f6c <finger0_up>
 8000eac:	e02d      	b.n	8000f0a <process_received_data+0xc6>
	                          case 1: finger1_up(); break;
 8000eae:	f000 f875 	bl	8000f9c <finger1_up>
 8000eb2:	e02a      	b.n	8000f0a <process_received_data+0xc6>
	                          case 2: finger2_up(); break;
 8000eb4:	f000 f88a 	bl	8000fcc <finger2_up>
 8000eb8:	e027      	b.n	8000f0a <process_received_data+0xc6>
	                          case 3: finger3_up(); break;
 8000eba:	f000 f89f 	bl	8000ffc <finger3_up>
 8000ebe:	e024      	b.n	8000f0a <process_received_data+0xc6>
	                          case 4: finger4_up(); break;
 8000ec0:	f000 f8b2 	bl	8001028 <finger4_up>
 8000ec4:	e021      	b.n	8000f0a <process_received_data+0xc6>
	                      }
	                  }
	                  else if (value == 0)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11e      	bne.n	8000f0a <process_received_data+0xc6>
	                  {
	                      switch (finger_index)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d81b      	bhi.n	8000f0a <process_received_data+0xc6>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <process_received_data+0x94>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000eed 	.word	0x08000eed
 8000edc:	08000ef3 	.word	0x08000ef3
 8000ee0:	08000ef9 	.word	0x08000ef9
 8000ee4:	08000eff 	.word	0x08000eff
 8000ee8:	08000f05 	.word	0x08000f05
	                      {
	                          case 0: finger0_down(); break;
 8000eec:	f000 f832 	bl	8000f54 <finger0_down>
 8000ef0:	e00b      	b.n	8000f0a <process_received_data+0xc6>
	                          case 1: finger1_down(); break;
 8000ef2:	f000 f847 	bl	8000f84 <finger1_down>
 8000ef6:	e008      	b.n	8000f0a <process_received_data+0xc6>
	                          case 2: finger2_down(); break;
 8000ef8:	f000 f85c 	bl	8000fb4 <finger2_down>
 8000efc:	e005      	b.n	8000f0a <process_received_data+0xc6>
	                          case 3: finger3_down(); break;
 8000efe:	f000 f871 	bl	8000fe4 <finger3_down>
 8000f02:	e002      	b.n	8000f0a <process_received_data+0xc6>
	                          case 4: finger4_down(); break;
 8000f04:	f000 f886 	bl	8001014 <finger4_down>
 8000f08:	bf00      	nop
	                      }
	                  }

	                  finger_index++; // Tăng chỉ số ngón tay
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]

	                  // Kiểm tra nếu đã xử lý đủ 5 ngón tay
	                  if (finger_index >= 5)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	dc07      	bgt.n	8000f26 <process_received_data+0xe2>
	          for (char *ptr = uart_rx_buffer; *ptr != '\0'; ptr++)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1a1      	bne.n	8000e68 <process_received_data+0x24>
 8000f24:	e000      	b.n	8000f28 <process_received_data+0xe4>
	                  {
	                      break;
 8000f26:	bf00      	nop
	                  }
	              }
	          }

	          // Đặt lại nội dung mảng để sẵn sàng nhận chuỗi mới
	          for (int i = 0; i < sizeof(uart_rx_buffer); i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	e007      	b.n	8000f3e <process_received_data+0xfa>
	          {
	              uart_rx_buffer[i] = '\0';
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <process_received_data+0x10c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
	          for (int i = 0; i < sizeof(uart_rx_buffer); i++)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2bff      	cmp	r3, #255	@ 0xff
 8000f42:	d9f4      	bls.n	8000f2e <process_received_data+0xea>
	          }
	      }
	  }
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200001c9 	.word	0x200001c9
 8000f50:	200000c8 	.word	0x200000c8

08000f54 <finger0_down>:
void finger0_down(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(0, 120);
 8000f58:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000f68 <finger0_down+0x14>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 fb8b 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	42f00000 	.word	0x42f00000

08000f6c <finger0_up>:

void finger0_up(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(0, 180);
 8000f70:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000f80 <finger0_up+0x14>
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fb7f 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	43340000 	.word	0x43340000

08000f84 <finger1_down>:

void finger1_down(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(1, 50);
 8000f88:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000f98 <finger1_down+0x14>
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 fb73 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	42480000 	.word	0x42480000

08000f9c <finger1_up>:

void finger1_up(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(1, 180);
 8000fa0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000fb0 <finger1_up+0x14>
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fb67 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	43340000 	.word	0x43340000

08000fb4 <finger2_down>:

void finger2_down(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(2, 0);
 8000fb8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000fc8 <finger2_down+0x14>
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f000 fb5b 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	00000000 	.word	0x00000000

08000fcc <finger2_up>:

void finger2_up(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(2, 180);
 8000fd0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000fe0 <finger2_up+0x14>
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f000 fb4f 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	43340000 	.word	0x43340000

08000fe4 <finger3_down>:

void finger3_down(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(3, 40);
 8000fe8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000ff8 <finger3_down+0x14>
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 fb43 	bl	8001678 <PCA9685_SetServoAngle>
};
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	42200000 	.word	0x42200000

08000ffc <finger3_up>:

void finger3_up(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(3, 180);
 8001000:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001010 <finger3_up+0x14>
 8001004:	2003      	movs	r0, #3
 8001006:	f000 fb37 	bl	8001678 <PCA9685_SetServoAngle>
};
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	43340000 	.word	0x43340000

08001014 <finger4_down>:

void finger4_down(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(4, 30);
 8001018:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 800101c:	2004      	movs	r0, #4
 800101e:	f000 fb2b 	bl	8001678 <PCA9685_SetServoAngle>
};
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <finger4_up>:

void finger4_up(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	PCA9685_SetServoAngle(4, 180);
 800102c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800103c <finger4_up+0x14>
 8001030:	2004      	movs	r0, #4
 8001032:	f000 fb21 	bl	8001678 <PCA9685_SetServoAngle>
};
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	43340000 	.word	0x43340000

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fcbe 	bl	80019c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f836 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f8ea 	bl	8001224 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001050:	f000 f890 	bl	8001174 <MX_I2C1_Init>
  MX_UART4_Init();
 8001054:	f000 f8bc 	bl	80011d0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1);
 8001058:	4813      	ldr	r0, [pc, #76]	@ (80010a8 <main+0x68>)
 800105a:	f000 fb67 	bl	800172c <PCA9685_Init>
  PCA9685_SetServoAngle(0, 180); //120 -180
 800105e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80010ac <main+0x6c>
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fb08 	bl	8001678 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(1, 180); //180 -50
 8001068:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80010ac <main+0x6c>
 800106c:	2001      	movs	r0, #1
 800106e:	f000 fb03 	bl	8001678 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(2, 180);   //180-0
 8001072:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80010ac <main+0x6c>
 8001076:	2002      	movs	r0, #2
 8001078:	f000 fafe 	bl	8001678 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(3, 180);   //180-40
 800107c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80010ac <main+0x6c>
 8001080:	2003      	movs	r0, #3
 8001082:	f000 faf9 	bl	8001678 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(4, 180);   //180-30
 8001086:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80010ac <main+0x6c>
 800108a:	2004      	movs	r0, #4
 800108c:	f000 faf4 	bl	8001678 <PCA9685_SetServoAngle>

  HAL_Delay(2000);
 8001090:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001094:	f000 fd08 	bl	8001aa8 <HAL_Delay>

  HAL_UART_Receive_IT(&huart4, &received_byte, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <main+0x70>)
 800109c:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <main+0x74>)
 800109e:	f002 fef3 	bl	8003e88 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  process_received_data();
 80010a2:	f7ff fecf 	bl	8000e44 <process_received_data>
 80010a6:	e7fc      	b.n	80010a2 <main+0x62>
 80010a8:	2000002c 	.word	0x2000002c
 80010ac:	43340000 	.word	0x43340000
 80010b0:	200001c8 	.word	0x200001c8
 80010b4:	20000080 	.word	0x20000080

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	@ 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fe02 	bl	8004cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <SystemClock_Config+0xb4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a21      	ldr	r2, [pc, #132]	@ (800116c <SystemClock_Config+0xb4>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <SystemClock_Config+0xb4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <SystemClock_Config+0xb8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <SystemClock_Config+0xb8>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <SystemClock_Config+0xb8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	2301      	movs	r3, #1
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111c:	2310      	movs	r3, #16
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f9c5 	bl	80034b8 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001134:	f000 f8e2 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fc28 	bl	80039a8 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800115e:	f000 f8cd 	bl	80012fc <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	@ 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f000 ffdd 	bl	8002170 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 f89e 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000002c 	.word	0x2000002c
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00061a80 	.word	0x00061a80

080011d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_UART4_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_UART4_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_UART4_Init+0x4c>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_UART4_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_UART4_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_UART4_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_UART4_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_UART4_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_UART4_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_UART4_Init+0x4c>)
 8001208:	f002 fdee 	bl	8003de8 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001212:	f000 f873 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000080 	.word	0x20000080
 8001220:	40004c00 	.word	0x40004c00

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <MX_GPIO_Init+0x68>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a16      	ldr	r2, [pc, #88]	@ (800128c <MX_GPIO_Init+0x68>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <MX_GPIO_Init+0x68>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_GPIO_Init+0x68>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <MX_GPIO_Init+0x68>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <MX_GPIO_Init+0x68>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_GPIO_Init+0x68>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a08      	ldr	r2, [pc, #32]	@ (800128c <MX_GPIO_Init+0x68>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_GPIO_Init+0x68>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <HAL_UART_RxCpltCallback+0x54>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11b      	bne.n	80012da <HAL_UART_RxCpltCallback+0x4a>
    {
        if (received_byte != '\n')
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_UART_RxCpltCallback+0x58>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d008      	beq.n	80012bc <HAL_UART_RxCpltCallback+0x2c>
        {
            *buffer_ptr++ = received_byte;  // Lưu byte vào vị trí hiện tại của con trỏ và tăng con trỏ
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_UART_RxCpltCallback+0x5c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	490e      	ldr	r1, [pc, #56]	@ (80012ec <HAL_UART_RxCpltCallback+0x5c>)
 80012b2:	600a      	str	r2, [r1, #0]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_UART_RxCpltCallback+0x58>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e009      	b.n	80012d0 <HAL_UART_RxCpltCallback+0x40>
        }
        else
        {
            *buffer_ptr = '\0';             // Kết thúc chuỗi bằng ký tự null
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_UART_RxCpltCallback+0x5c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
            uart_received_flag = 1;         // Đặt cờ báo hiệu chuỗi đã nhận hoàn chỉnh
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_UART_RxCpltCallback+0x60>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
            buffer_ptr = uart_rx_buffer;    // Đặt lại con trỏ về đầu mảng cho lần nhận tiếp theo
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_UART_RxCpltCallback+0x5c>)
 80012cc:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_UART_RxCpltCallback+0x64>)
 80012ce:	601a      	str	r2, [r3, #0]
        }

        // Tiếp tục nhận byte tiếp theo
        HAL_UART_Receive_IT(&huart4, &received_byte, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	4905      	ldr	r1, [pc, #20]	@ (80012e8 <HAL_UART_RxCpltCallback+0x58>)
 80012d4:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <HAL_UART_RxCpltCallback+0x68>)
 80012d6:	f002 fdd7 	bl	8003e88 <HAL_UART_Receive_IT>
    }
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004c00 	.word	0x40004c00
 80012e8:	200001c8 	.word	0x200001c8
 80012ec:	20000000 	.word	0x20000000
 80012f0:	200001c9 	.word	0x200001c9
 80012f4:	200000c8 	.word	0x200000c8
 80012f8:	20000080 	.word	0x20000080

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af04      	add	r7, sp, #16
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	460b      	mov	r3, r1
 8001314:	71bb      	strb	r3, [r7, #6]
 8001316:	4613      	mov	r3, r2
 8001318:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <PCA9685_SetBit+0x1c>
 8001320:	2301      	movs	r3, #1
 8001322:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <PCA9685_SetBit+0xb0>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	b29a      	uxth	r2, r3
 800132c:	230a      	movs	r3, #10
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2301      	movs	r3, #1
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 030f 	add.w	r3, r7, #15
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	f001 fa53 	bl	80027e8 <HAL_I2C_Mem_Read>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e031      	b.n	80013b0 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	2201      	movs	r2, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800135a:	b25b      	sxtb	r3, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	b25a      	sxtb	r2, r3
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	b25b      	sxtb	r3, r3
 8001364:	4013      	ands	r3, r2
 8001366:	b25b      	sxtb	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	b25a      	sxtb	r2, r3
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b25b      	sxtb	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <PCA9685_SetBit+0xb0>)
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	b29a      	uxth	r2, r3
 800138e:	230a      	movs	r3, #10
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 030f 	add.w	r3, r7, #15
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2180      	movs	r1, #128	@ 0x80
 80013a0:	f001 f928 	bl	80025f4 <HAL_I2C_Mem_Write>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001cc 	.word	0x200001cc

080013bc <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80013c2:	2306      	movs	r3, #6
 80013c4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <PCA9685_SoftwareReset+0x30>)
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	230a      	movs	r3, #10
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	2100      	movs	r1, #0
 80013d4:	f001 f810 	bl	80023f8 <HAL_I2C_Master_Transmit>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200001cc 	.word	0x200001cc

080013f0 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	461a      	mov	r2, r3
 80013fe:	2104      	movs	r1, #4
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff81 	bl	8001308 <PCA9685_SetBit>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	461a      	mov	r2, r3
 800141e:	2107      	movs	r1, #7
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff71 	bl	8001308 <PCA9685_SetBit>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	461a      	mov	r2, r3
 800143e:	2105      	movs	r1, #5
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff61 	bl	8001308 <PCA9685_SetBit>
 8001446:	4603      	mov	r3, r0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af04      	add	r7, sp, #16
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001460:	4293      	cmp	r3, r2
 8001462:	d902      	bls.n	800146a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001464:	2303      	movs	r3, #3
 8001466:	72fb      	strb	r3, [r7, #11]
 8001468:	e046      	b.n	80014f8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2b18      	cmp	r3, #24
 800146e:	d802      	bhi.n	8001476 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001470:	23ff      	movs	r3, #255	@ 0xff
 8001472:	72fb      	strb	r3, [r7, #11]
 8001474:	e040      	b.n	80014f8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001480:	ee17 0a90 	vmov	r0, s15
 8001484:	f7ff f804 	bl	8000490 <__aeabi_f2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <PCA9685_SetPwmFrequency+0xe8>)
 800148e:	f7ff f857 	bl	8000540 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	a126      	add	r1, pc, #152	@ (adr r1, 8001530 <PCA9685_SetPwmFrequency+0xe0>)
 8001498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800149c:	f7ff f97a 	bl	8000794 <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <PCA9685_SetPwmFrequency+0xec>)
 80014ae:	f7fe fe8f 	bl	80001d0 <__aeabi_dsub>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fafb 	bl	8000ab4 <__aeabi_d2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7fe ffe4 	bl	8000490 <__aeabi_f2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <PCA9685_SetPwmFrequency+0xf0>)
 80014ce:	f7fe fe81 	bl	80001d4 <__adddf3>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	ec43 2b17 	vmov	d7, r2, r3
 80014da:	eeb0 0a47 	vmov.f32	s0, s14
 80014de:	eef0 0a67 	vmov.f32	s1, s15
 80014e2:	f003 fc21 	bl	8004d28 <floor>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fac1 	bl	8000a74 <__aeabi_d2uiz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff ff79 	bl	80013f0 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <PCA9685_SetPwmFrequency+0xf4>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	230a      	movs	r3, #10
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2301      	movs	r3, #1
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f107 030b 	add.w	r3, r7, #11
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	22fe      	movs	r2, #254	@ 0xfe
 8001514:	2180      	movs	r1, #128	@ 0x80
 8001516:	f001 f86d 	bl	80025f4 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff ff68 	bl	80013f0 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff ff75 	bl	8001410 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	00000000 	.word	0x00000000
 8001534:	4177d784 	.word	0x4177d784
 8001538:	40b00000 	.word	0x40b00000
 800153c:	3ff00000 	.word	0x3ff00000
 8001540:	3fe00000 	.word	0x3fe00000
 8001544:	200001cc 	.word	0x200001cc

08001548 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af04      	add	r7, sp, #16
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	460b      	mov	r3, r1
 8001554:	80bb      	strh	r3, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3306      	adds	r3, #6
 8001562:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	b29b      	uxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <PCA9685_SetPwm+0x70>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	b29a      	uxth	r2, r3
 800158c:	230a      	movs	r3, #10
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	2304      	movs	r3, #4
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	f001 f829 	bl	80025f4 <HAL_I2C_Mem_Write>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001cc 	.word	0x200001cc

080015bc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	460b      	mov	r3, r1
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015d4:	d302      	bcc.n	80015dc <PCA9685_SetPin+0x20>
 80015d6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80015da:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d025      	beq.n	800162e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffa9 	bl	8001548 <PCA9685_SetPwm>
 80015f6:	4603      	mov	r3, r0
 80015f8:	e03a      	b.n	8001670 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001600:	4293      	cmp	r3, r2
 8001602:	d108      	bne.n	8001616 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff9b 	bl	8001548 <PCA9685_SetPwm>
 8001612:	4603      	mov	r3, r0
 8001614:	e02c      	b.n	8001670 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800161c:	330f      	adds	r3, #15
 800161e:	b29a      	uxth	r2, r3
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff8f 	bl	8001548 <PCA9685_SetPwm>
 800162a:	4603      	mov	r3, r0
 800162c:	e020      	b.n	8001670 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001634:	4293      	cmp	r3, r2
 8001636:	d108      	bne.n	800164a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff81 	bl	8001548 <PCA9685_SetPwm>
 8001646:	4603      	mov	r3, r0
 8001648:	e012      	b.n	8001670 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff75 	bl	8001548 <PCA9685_SetPwm>
 800165e:	4603      	mov	r3, r0
 8001660:	e006      	b.n	8001670 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001662:	88ba      	ldrh	r2, [r7, #4]
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff6d 	bl	8001548 <PCA9685_SetPwm>
 800166e:	4603      	mov	r3, r0
    }
  }
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	ed87 0a00 	vstr	s0, [r7]
 8001684:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001686:	edd7 7a00 	vldr	s15, [r7]
 800168a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d502      	bpl.n	800169a <PCA9685_SetServoAngle+0x22>
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 800169a:	edd7 7a00 	vldr	s15, [r7]
 800169e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001718 <PCA9685_SetServoAngle+0xa0>
 80016a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	dd01      	ble.n	80016b0 <PCA9685_SetServoAngle+0x38>
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <PCA9685_SetServoAngle+0xa4>)
 80016ae:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7fe feed 	bl	8000490 <__aeabi_f2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <PCA9685_SetServoAngle+0xa8>)
 80016bc:	f7fe ff40 	bl	8000540 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <PCA9685_SetServoAngle+0xac>)
 80016ce:	f7ff f861 	bl	8000794 <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <PCA9685_SetServoAngle+0xb0>)
 80016e0:	f7fe fd78 	bl	80001d4 <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f9e2 	bl	8000ab4 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 80016f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fc:	ee17 3a90 	vmov	r3, s15
 8001700:	b299      	uxth	r1, r3
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2200      	movs	r2, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff58 	bl	80015bc <PCA9685_SetPin>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	43340000 	.word	0x43340000
 800171c:	43340000 	.word	0x43340000
 8001720:	406a4000 	.word	0x406a4000
 8001724:	40668000 	.word	0x40668000
 8001728:	40690000 	.word	0x40690000

0800172c <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001734:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <PCA9685_Init+0x28>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 800173a:	f7ff fe3f 	bl	80013bc <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 800173e:	2030      	movs	r0, #48	@ 0x30
 8001740:	f7ff fe86 	bl	8001450 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fe73 	bl	8001430 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001cc 	.word	0x200001cc

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a19      	ldr	r2, [pc, #100]	@ (800182c <HAL_I2C_MspInit+0x84>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12b      	bne.n	8001822 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_I2C_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <HAL_I2C_MspInit+0x88>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_I2C_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e6:	23c0      	movs	r3, #192	@ 0xc0
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ea:	2312      	movs	r3, #18
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f6:	2304      	movs	r3, #4
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <HAL_I2C_MspInit+0x8c>)
 8001802:	f000 fb19 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_I2C_MspInit+0x88>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_I2C_MspInit+0x88>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001814:	6413      	str	r3, [r2, #64]	@ 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_I2C_MspInit+0x88>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	@ 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40005400 	.word	0x40005400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <HAL_UART_MspInit+0x94>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d133      	bne.n	80018c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <HAL_UART_MspInit+0x98>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a1b      	ldr	r2, [pc, #108]	@ (80018d0 <HAL_UART_MspInit+0x98>)
 8001864:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_UART_MspInit+0x98>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_UART_MspInit+0x98>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <HAL_UART_MspInit+0x98>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_UART_MspInit+0x98>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001892:	2303      	movs	r3, #3
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018a2:	2308      	movs	r3, #8
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4809      	ldr	r0, [pc, #36]	@ (80018d4 <HAL_UART_MspInit+0x9c>)
 80018ae:	f000 fac3 	bl	8001e38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2034      	movs	r0, #52	@ 0x34
 80018b8:	f000 f9f5 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018bc:	2034      	movs	r0, #52	@ 0x34
 80018be:	f000 fa0e 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40004c00 	.word	0x40004c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192e:	f000 f89b 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <UART4_IRQHandler+0x10>)
 800193e:	f002 fac9 	bl	8003ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000080 	.word	0x20000080

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001974:	f7ff ffea 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	@ (80019bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f003 f99f 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff fb4d 	bl	8001040 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019b4:	08004e60 	.word	0x08004e60
  ldr r2, =_sbss
 80019b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019bc:	200001d4 	.word	0x200001d4

080019c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <HAL_Init+0x40>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_Init+0x40>)
 80019da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_Init+0x40>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f94f 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff feae 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f967 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f000 f92f 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	@ (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	20000008 	.word	0x20000008

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	200001d0 	.word	0x200001d0

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200001d0 	.word	0x200001d0

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000000c 	.word	0x2000000c

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	@ (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	@ (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff29 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff3e 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff31 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff feb6 	bl	8001a90 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d008      	beq.n	8001d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	@ 0x80
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e052      	b.n	8001dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0216 	bic.w	r2, r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_DMA_Abort+0x62>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0208 	bic.w	r2, r2, #8
 8001d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	e013      	b.n	8001dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d96:	f7ff fe7b 	bl	8001a90 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d90c      	bls.n	8001dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e015      	b.n	8001dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e4      	bne.n	8001d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	223f      	movs	r2, #63	@ 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e00c      	b.n	8001e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b5d      	ldr	r3, [pc, #372]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	@ (800214c <HAL_GPIO_Init+0x314>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a51      	ldr	r2, [pc, #324]	@ (8002150 <HAL_GPIO_Init+0x318>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <HAL_GPIO_Init+0x31c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	@ (8002158 <HAL_GPIO_Init+0x320>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	@ (800215c <HAL_GPIO_Init+0x324>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	@ (8002160 <HAL_GPIO_Init+0x328>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	@ (8002168 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a32      	ldr	r2, [pc, #200]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a27      	ldr	r2, [pc, #156]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a12      	ldr	r2, [pc, #72]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e12b      	b.n	80023da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fb06 	bl	80017a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	@ 0x24
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d4:	f001 fde0 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a81      	ldr	r2, [pc, #516]	@ (80023e4 <HAL_I2C_Init+0x274>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d807      	bhi.n	80021f4 <HAL_I2C_Init+0x84>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a80      	ldr	r2, [pc, #512]	@ (80023e8 <HAL_I2C_Init+0x278>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e006      	b.n	8002202 <HAL_I2C_Init+0x92>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a7d      	ldr	r2, [pc, #500]	@ (80023ec <HAL_I2C_Init+0x27c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0e7      	b.n	80023da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a78      	ldr	r2, [pc, #480]	@ (80023f0 <HAL_I2C_Init+0x280>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0c9b      	lsrs	r3, r3, #18
 8002214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a6a      	ldr	r2, [pc, #424]	@ (80023e4 <HAL_I2C_Init+0x274>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d802      	bhi.n	8002244 <HAL_I2C_Init+0xd4>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	e009      	b.n	8002258 <HAL_I2C_Init+0xe8>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	4a69      	ldr	r2, [pc, #420]	@ (80023f4 <HAL_I2C_Init+0x284>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	3301      	adds	r3, #1
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800226a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	495c      	ldr	r1, [pc, #368]	@ (80023e4 <HAL_I2C_Init+0x274>)
 8002274:	428b      	cmp	r3, r1
 8002276:	d819      	bhi.n	80022ac <HAL_I2C_Init+0x13c>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e59      	subs	r1, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fbb1 f3f3 	udiv	r3, r1, r3
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800228c:	400b      	ands	r3, r1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_I2C_Init+0x138>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e59      	subs	r1, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a6:	e051      	b.n	800234c <HAL_I2C_Init+0x1dc>
 80022a8:	2304      	movs	r3, #4
 80022aa:	e04f      	b.n	800234c <HAL_I2C_Init+0x1dc>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d111      	bne.n	80022d8 <HAL_I2C_Init+0x168>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e012      	b.n	80022fe <HAL_I2C_Init+0x18e>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	0099      	lsls	r1, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x196>
 8002302:	2301      	movs	r3, #1
 8002304:	e022      	b.n	800234c <HAL_I2C_Init+0x1dc>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10e      	bne.n	800232c <HAL_I2C_Init+0x1bc>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1e58      	subs	r0, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	440b      	add	r3, r1
 800231c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800232a:	e00f      	b.n	800234c <HAL_I2C_Init+0x1dc>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	0099      	lsls	r1, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	6809      	ldr	r1, [r1, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800237a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6911      	ldr	r1, [r2, #16]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68d2      	ldr	r2, [r2, #12]
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	000186a0 	.word	0x000186a0
 80023e8:	001e847f 	.word	0x001e847f
 80023ec:	003d08ff 	.word	0x003d08ff
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	10624dd3 	.word	0x10624dd3

080023f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	461a      	mov	r2, r3
 8002404:	460b      	mov	r3, r1
 8002406:	817b      	strh	r3, [r7, #10]
 8002408:	4613      	mov	r3, r2
 800240a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff fb40 	bl	8001a90 <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	f040 80e0 	bne.w	80025e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2319      	movs	r3, #25
 8002426:	2201      	movs	r2, #1
 8002428:	4970      	ldr	r1, [pc, #448]	@ (80025ec <HAL_I2C_Master_Transmit+0x1f4>)
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fe0e 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	e0d3      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_I2C_Master_Transmit+0x50>
 8002444:	2302      	movs	r3, #2
 8002446:	e0cc      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d007      	beq.n	800246e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	@ 0x21
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2210      	movs	r2, #16
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	893a      	ldrh	r2, [r7, #8]
 800249e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a50      	ldr	r2, [pc, #320]	@ (80025f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024b0:	8979      	ldrh	r1, [r7, #10]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fbc8 	bl	8002c4c <I2C_MasterRequestWrite>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e08d      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024dc:	e066      	b.n	80025ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	6a39      	ldr	r1, [r7, #32]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fecc 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d107      	bne.n	8002506 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d11b      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x188>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d017      	beq.n	8002580 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	6a39      	ldr	r1, [r7, #32]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fec3 	bl	8003310 <I2C_WaitOnBTFFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	2b04      	cmp	r3, #4
 8002596:	d107      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e01a      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d194      	bne.n	80024de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	00100002 	.word	0x00100002
 80025f0:	ffff0000 	.word	0xffff0000

080025f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4603      	mov	r3, r0
 8002604:	817b      	strh	r3, [r7, #10]
 8002606:	460b      	mov	r3, r1
 8002608:	813b      	strh	r3, [r7, #8]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800260e:	f7ff fa3f 	bl	8001a90 <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	f040 80d9 	bne.w	80027d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2319      	movs	r3, #25
 8002628:	2201      	movs	r2, #1
 800262a:	496d      	ldr	r1, [pc, #436]	@ (80027e0 <HAL_I2C_Mem_Write+0x1ec>)
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fd0d 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
 800263a:	e0cc      	b.n	80027d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_I2C_Mem_Write+0x56>
 8002646:	2302      	movs	r3, #2
 8002648:	e0c5      	b.n	80027d6 <HAL_I2C_Mem_Write+0x1e2>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d007      	beq.n	8002670 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2221      	movs	r2, #33	@ 0x21
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a4d      	ldr	r2, [pc, #308]	@ (80027e4 <HAL_I2C_Mem_Write+0x1f0>)
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026b2:	88f8      	ldrh	r0, [r7, #6]
 80026b4:	893a      	ldrh	r2, [r7, #8]
 80026b6:	8979      	ldrh	r1, [r7, #10]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fb44 	bl	8002d50 <I2C_RequestMemoryWrite>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d052      	beq.n	8002774 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e081      	b.n	80027d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fdd2 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d107      	bne.n	80026fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06b      	b.n	80027d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d11b      	bne.n	8002774 <HAL_I2C_Mem_Write+0x180>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1aa      	bne.n	80026d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fdc5 	bl	8003310 <I2C_WaitOnBTFFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	2b04      	cmp	r3, #4
 8002792:	d107      	bne.n	80027a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e016      	b.n	80027d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	00100002 	.word	0x00100002
 80027e4:	ffff0000 	.word	0xffff0000

080027e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002802:	f7ff f945 	bl	8001a90 <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 8214 	bne.w	8002c3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2319      	movs	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	497b      	ldr	r1, [pc, #492]	@ (8002a0c <HAL_I2C_Mem_Read+0x224>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fc13 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	e207      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_I2C_Mem_Read+0x56>
 800283a:	2302      	movs	r3, #2
 800283c:	e200      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d007      	beq.n	8002864 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2222      	movs	r2, #34	@ 0x22
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a10 <HAL_I2C_Mem_Read+0x228>)
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a6:	88f8      	ldrh	r0, [r7, #6]
 80028a8:	893a      	ldrh	r2, [r7, #8]
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fae0 	bl	8002e7c <I2C_RequestMemoryRead>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1bc      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d113      	bne.n	80028f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e190      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d11b      	bne.n	8002936 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e170      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	2b02      	cmp	r3, #2
 800293c:	d11b      	bne.n	8002976 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800295c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	e150      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800298c:	e144      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	2b03      	cmp	r3, #3
 8002994:	f200 80f1 	bhi.w	8002b7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b01      	cmp	r3, #1
 800299e:	d123      	bne.n	80029e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fcfb 	bl	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e145      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e6:	e117      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d14e      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f6:	2200      	movs	r2, #0
 80029f8:	4906      	ldr	r1, [pc, #24]	@ (8002a14 <HAL_I2C_Mem_Read+0x22c>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fb26 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e11a      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
 8002a0a:	bf00      	nop
 8002a0c:	00100002 	.word	0x00100002
 8002a10:	ffff0000 	.word	0xffff0000
 8002a14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a8c:	e0c4      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	496c      	ldr	r1, [pc, #432]	@ (8002c48 <HAL_I2C_Mem_Read+0x460>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fad7 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cb      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af0:	2200      	movs	r2, #0
 8002af2:	4955      	ldr	r1, [pc, #340]	@ (8002c48 <HAL_I2C_Mem_Read+0x460>)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 faa9 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e09d      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b78:	e04e      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fc0e 	bl	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e058      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d124      	bne.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f aeb6 	bne.w	800298e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	@ 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	00010004 	.word	0x00010004

08002c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d006      	beq.n	8002c76 <I2C_MasterRequestWrite+0x2a>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d003      	beq.n	8002c76 <I2C_MasterRequestWrite+0x2a>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c74:	d108      	bne.n	8002c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e00b      	b.n	8002ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	2b12      	cmp	r3, #18
 8002c8e:	d107      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f9cd 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc6:	d103      	bne.n	8002cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e035      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e01b      	b.n	8002d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	11db      	asrs	r3, r3, #7
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0306 	and.w	r3, r3, #6
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f063 030f 	orn	r3, r3, #15
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	490e      	ldr	r1, [pc, #56]	@ (8002d48 <I2C_MasterRequestWrite+0xfc>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa16 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e010      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4907      	ldr	r1, [pc, #28]	@ (8002d4c <I2C_MasterRequestWrite+0x100>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa06 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010008 	.word	0x00010008
 8002d4c:	00010002 	.word	0x00010002

08002d50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f960 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da0:	d103      	bne.n	8002daa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e05f      	b.n	8002e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dae:	897b      	ldrh	r3, [r7, #10]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	6a3a      	ldr	r2, [r7, #32]
 8002dc2:	492d      	ldr	r1, [pc, #180]	@ (8002e78 <I2C_RequestMemoryWrite+0x128>)
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f9bb 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e04c      	b.n	8002e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fa46 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d107      	bne.n	8002e12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e02b      	b.n	8002e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	e021      	b.n	8002e6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e28:	893b      	ldrh	r3, [r7, #8]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa20 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e005      	b.n	8002e6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e62:	893b      	ldrh	r3, [r7, #8]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	00010002 	.word	0x00010002

08002e7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8c2 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002edc:	d103      	bne.n	8002ee6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0aa      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	4952      	ldr	r1, [pc, #328]	@ (8003048 <I2C_RequestMemoryRead+0x1cc>)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f91d 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e097      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f9a8 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e076      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e021      	b.n	8002fa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f74:	6a39      	ldr	r1, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f982 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d107      	bne.n	8002f9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e050      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9e:	893b      	ldrh	r3, [r7, #8]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f967 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e035      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f82b 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800300a:	d103      	bne.n	8003014 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e013      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	4906      	ldr	r1, [pc, #24]	@ (8003048 <I2C_RequestMemoryRead+0x1cc>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f886 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305c:	e048      	b.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d044      	beq.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe fd13 	bl	8001a90 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d139      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10d      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	e00c      	b.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d116      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e023      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10d      	bne.n	8003116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	e00c      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d093      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314e:	e071      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315e:	d123      	bne.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e067      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d041      	beq.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b0:	f7fe fc6e 	bl	8001a90 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d302      	bcc.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d136      	bne.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e00b      	b.n	8003202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e021      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10c      	bne.n	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	43da      	mvns	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4013      	ands	r3, r2
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e00b      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af6d 	bne.w	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8e3 	bl	800345a <I2C_IsAcknowledgeFailed>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e034      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d028      	beq.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fbf3 	bl	8001a90 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c6:	2b80      	cmp	r3, #128	@ 0x80
 80032c8:	d016      	beq.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	d1c3      	bne.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800331c:	e034      	b.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f89b 	bl	800345a <I2C_IsAcknowledgeFailed>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e034      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d028      	beq.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe fbab 	bl	8001a90 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11d      	bne.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d016      	beq.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d1c3      	bne.n	800331e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ac:	e049      	b.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d119      	bne.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0210 	mvn.w	r2, #16
 80033c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e030      	b.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7fe fb4e 	bl	8001a90 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11d      	bne.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d016      	beq.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b40      	cmp	r3, #64	@ 0x40
 800344e:	d1ae      	bne.n	80033ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003470:	d11b      	bne.n	80034aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800347a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f043 0204 	orr.w	r2, r3, #4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e267      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d075      	beq.n	80035c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034d6:	4b88      	ldr	r3, [pc, #544]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00c      	beq.n	80034fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e2:	4b85      	ldr	r3, [pc, #532]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d112      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ee:	4b82      	ldr	r3, [pc, #520]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4b7e      	ldr	r3, [pc, #504]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05b      	beq.n	80035c0 <HAL_RCC_OscConfig+0x108>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d157      	bne.n	80035c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e242      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x74>
 800351e:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x98>
 8003536:	4b70      	ldr	r3, [pc, #448]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6f      	ldr	r2, [pc, #444]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b6d      	ldr	r3, [pc, #436]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6c      	ldr	r2, [pc, #432]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 8003550:	4b69      	ldr	r3, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a68      	ldr	r2, [pc, #416]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b66      	ldr	r3, [pc, #408]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a65      	ldr	r2, [pc, #404]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fa8e 	bl	8001a90 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fa8a 	bl	8001a90 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e207      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xc0>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fa7a 	bl	8001a90 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fa76 	bl	8001a90 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1f3      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b51      	ldr	r3, [pc, #324]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0xe8>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d063      	beq.n	8003696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d11c      	bne.n	8003620 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e6:	4b44      	ldr	r3, [pc, #272]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x152>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1c7      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360a:	4b3b      	ldr	r3, [pc, #236]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4937      	ldr	r1, [pc, #220]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	e03a      	b.n	8003696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003628:	4b34      	ldr	r3, [pc, #208]	@ (80036fc <HAL_RCC_OscConfig+0x244>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe fa2f 	bl	8001a90 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe fa2b 	bl	8001a90 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e1a8      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b2b      	ldr	r3, [pc, #172]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4925      	ldr	r1, [pc, #148]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b24      	ldr	r3, [pc, #144]	@ (80036fc <HAL_RCC_OscConfig+0x244>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fa0e 	bl	8001a90 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fe fa0a 	bl	8001a90 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e187      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d036      	beq.n	8003710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_RCC_OscConfig+0x248>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fe f9ee 	bl	8001a90 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fe f9ea 	bl	8001a90 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e167      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x200>
 80036d6:	e01b      	b.n	8003710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x248>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7fe f9d7 	bl	8001a90 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e00e      	b.n	8003704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fe f9d3 	bl	8001a90 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d907      	bls.n	8003704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e150      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
 80036f8:	40023800 	.word	0x40023800
 80036fc:	42470000 	.word	0x42470000
 8003700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b88      	ldr	r3, [pc, #544]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ea      	bne.n	80036e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8097 	beq.w	800384c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b7d      	ldr	r3, [pc, #500]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a7c      	ldr	r2, [pc, #496]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b7a      	ldr	r3, [pc, #488]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b77      	ldr	r3, [pc, #476]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d118      	bne.n	800378c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b74      	ldr	r3, [pc, #464]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a73      	ldr	r2, [pc, #460]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7fe f993 	bl	8001a90 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fe f98f 	bl	8001a90 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e10c      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2ea>
 8003794:	4b64      	ldr	r3, [pc, #400]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	4a63      	ldr	r2, [pc, #396]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x324>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x30c>
 80037aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0x324>
 80037c4:	4b58      	ldr	r3, [pc, #352]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	4a57      	ldr	r2, [pc, #348]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d0:	4b55      	ldr	r3, [pc, #340]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fe f954 	bl	8001a90 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fe f950 	bl	8001a90 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0cb      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <HAL_RCC_OscConfig+0x334>
 800380e:	e014      	b.n	800383a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fe f93e 	bl	8001a90 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe f93a 	bl	8001a90 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0b5      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382e:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ee      	bne.n	8003818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	4a38      	ldr	r2, [pc, #224]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a1 	beq.w	8003998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003856:	4b34      	ldr	r3, [pc, #208]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d05c      	beq.n	800391c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d141      	bne.n	80038ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe f90e 	bl	8001a90 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe f90a 	bl	8001a90 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e087      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	491b      	ldr	r1, [pc, #108]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe f8e3 	bl	8001a90 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe f8df 	bl	8001a90 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e05c      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x416>
 80038ec:	e054      	b.n	8003998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe f8cc 	bl	8001a90 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe f8c8 	bl	8001a90 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e045      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x444>
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e038      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	40007000 	.word	0x40007000
 8003930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x4ec>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d028      	beq.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d121      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d11a      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003964:	4013      	ands	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800396a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	4293      	cmp	r3, r2
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cc      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b68      	ldr	r3, [pc, #416]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d90c      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0b8      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b59      	ldr	r3, [pc, #356]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a58      	ldr	r2, [pc, #352]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a14:	4b53      	ldr	r3, [pc, #332]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a52      	ldr	r2, [pc, #328]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	494d      	ldr	r1, [pc, #308]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d044      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d119      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	4b3f      	ldr	r3, [pc, #252]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e067      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b37      	ldr	r3, [pc, #220]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4934      	ldr	r1, [pc, #208]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fffa 	bl	8001a90 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fd fff6 	bl	8001a90 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d20c      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e032      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4916      	ldr	r1, [pc, #88]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	490e      	ldr	r1, [pc, #56]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b2e:	f000 f821 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	490a      	ldr	r1, [pc, #40]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	5ccb      	ldrb	r3, [r1, r3]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd ff5a 	bl	8001a08 <HAL_InitTick>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	08004e38 	.word	0x08004e38
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	20000008 	.word	0x20000008

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b78:	b094      	sub	sp, #80	@ 0x50
 8003b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8c:	4b79      	ldr	r3, [pc, #484]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d00d      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	f200 80e1 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ba6:	e0db      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b73      	ldr	r3, [pc, #460]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bac:	e0db      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bae:	4b73      	ldr	r3, [pc, #460]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bb2:	e0d8      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bca:	4b6a      	ldr	r3, [pc, #424]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	6139      	str	r1, [r7, #16]
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c18:	4659      	mov	r1, fp
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4651      	mov	r1, sl
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4651      	mov	r1, sl
 8003c28:	ebb2 0801 	subs.w	r8, r2, r1
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c46:	4690      	mov	r8, r2
 8003c48:	4699      	mov	r9, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb18 0303 	adds.w	r3, r8, r3
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	462b      	mov	r3, r5
 8003c54:	eb49 0303 	adc.w	r3, r9, r3
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c66:	4629      	mov	r1, r5
 8003c68:	024b      	lsls	r3, r1, #9
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c70:	4621      	mov	r1, r4
 8003c72:	024a      	lsls	r2, r1, #9
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c84:	f7fc ff66 	bl	8000b54 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c90:	e058      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b38      	ldr	r3, [pc, #224]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0159      	lsls	r1, r3, #5
 8003cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbe:	0150      	lsls	r0, r2, #5
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	00eb      	lsls	r3, r5, #3
 8003cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfa:	00e2      	lsls	r2, r4, #3
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	4643      	mov	r3, r8
 8003d02:	18e3      	adds	r3, r4, r3
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	464b      	mov	r3, r9
 8003d08:	eb45 0303 	adc.w	r3, r5, r3
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	028b      	lsls	r3, r1, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d24:	4621      	mov	r1, r4
 8003d26:	028a      	lsls	r2, r1, #10
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	61fa      	str	r2, [r7, #28]
 8003d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d38:	f7fc ff0c 	bl	8000b54 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3750      	adds	r7, #80	@ 0x50
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	007a1200 	.word	0x007a1200

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d9c:	f7ff fff0 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0a9b      	lsrs	r3, r3, #10
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4903      	ldr	r1, [pc, #12]	@ (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08004e48 	.word	0x08004e48

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	f7ff ffdc 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0b5b      	lsrs	r3, r3, #13
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	08004e48 	.word	0x08004e48

08003de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e042      	b.n	8003e80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fd12 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	@ 0x24
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fcdb 	bl	80047e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d112      	bne.n	8003ec8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_UART_Receive_IT+0x26>
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00b      	b.n	8003eca <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 faba 	bl	8004438 <UART_Start_Receive_IT>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	e000      	b.n	8003eca <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_UART_IRQHandler+0x66>
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fb99 	bl	800466a <UART_Receive_IT>
      return;
 8003f38:	e25b      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80de 	beq.w	8004100 <HAL_UART_IRQHandler+0x22c>
 8003f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80d1 	beq.w	8004100 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xae>
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_UART_IRQHandler+0xd2>
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_UART_IRQHandler+0xf6>
 8003fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_UART_IRQHandler+0x126>
 8003fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f043 0208 	orr.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 81f2 	beq.w	80043e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_UART_IRQHandler+0x14e>
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb24 	bl	800466a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <HAL_UART_IRQHandler+0x17a>
 8004046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d04f      	beq.n	80040ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa2c 	bl	80044ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d141      	bne.n	80040e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800407c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800408e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800409a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1d9      	bne.n	8004062 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d013      	beq.n	80040de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	4a7e      	ldr	r2, [pc, #504]	@ (80042b4 <HAL_UART_IRQHandler+0x3e0>)
 80040bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd fe95 	bl	8001df2 <HAL_DMA_Abort_IT>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040d8:	4610      	mov	r0, r2
 80040da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	e00e      	b.n	80040fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f994 	bl	800440c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e00a      	b.n	80040fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f990 	bl	800440c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	e006      	b.n	80040fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f98c 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040fa:	e175      	b.n	80043e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	bf00      	nop
    return;
 80040fe:	e173      	b.n	80043e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 814f 	bne.w	80043a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8148 	beq.w	80043a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8141 	beq.w	80043a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	f040 80b6 	bne.w	80042b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004158:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8145 	beq.w	80043ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416a:	429a      	cmp	r2, r3
 800416c:	f080 813e 	bcs.w	80043ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004176:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004182:	f000 8088 	beq.w	8004296 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800419c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1d9      	bne.n	8004186 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e1      	bne.n	80041d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800421e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004232:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004234:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004238:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e3      	bne.n	800420e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004266:	f023 0310 	bic.w	r3, r3, #16
 800426a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004278:	65ba      	str	r2, [r7, #88]	@ 0x58
 800427a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800427e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e3      	bne.n	8004254 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	4618      	mov	r0, r3
 8004292:	f7fd fd3e 	bl	8001d12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f8b7 	bl	8004420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b2:	e09b      	b.n	80043ec <HAL_UART_IRQHandler+0x518>
 80042b4:	08004573 	.word	0x08004573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 808e 	beq.w	80043f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8089 	beq.w	80043f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004302:	647a      	str	r2, [r7, #68]	@ 0x44
 8004304:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e3      	bne.n	80042de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	623b      	str	r3, [r7, #32]
   return(result);
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800433a:	633a      	str	r2, [r7, #48]	@ 0x30
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	60fb      	str	r3, [r7, #12]
   return(result);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004380:	61fa      	str	r2, [r7, #28]
 8004382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	69b9      	ldr	r1, [r7, #24]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	617b      	str	r3, [r7, #20]
   return(result);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800439a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f83d 	bl	8004420 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a6:	e023      	b.n	80043f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_UART_IRQHandler+0x4f4>
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f8ea 	bl	800459a <UART_Transmit_IT>
    return;
 80043c6:	e014      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <HAL_UART_IRQHandler+0x51e>
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f92a 	bl	800463a <UART_EndTransmit_IT>
    return;
 80043e6:	e004      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f0:	bf00      	nop
  }
}
 80043f2:	37e8      	adds	r7, #232	@ 0xe8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2222      	movs	r2, #34	@ 0x22
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800447c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0220 	orr.w	r2, r2, #32
 800449c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b095      	sub	sp, #84	@ 0x54
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3314      	adds	r3, #20
 80044ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800450e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	d119      	bne.n	8004558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	60bb      	str	r3, [r7, #8]
   return(result);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	647b      	str	r3, [r7, #68]	@ 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004544:	61ba      	str	r2, [r7, #24]
 8004546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6979      	ldr	r1, [r7, #20]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	613b      	str	r3, [r7, #16]
   return(result);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004566:	bf00      	nop
 8004568:	3754      	adds	r7, #84	@ 0x54
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff ff3d 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b21      	cmp	r3, #33	@ 0x21
 80045ac:	d13e      	bne.n	800462c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b6:	d114      	bne.n	80045e2 <UART_Transmit_IT+0x48>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d110      	bne.n	80045e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	1c9a      	adds	r2, r3, #2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	621a      	str	r2, [r3, #32]
 80045e0:	e008      	b.n	80045f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6211      	str	r1, [r2, #32]
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10f      	bne.n	8004628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	e000      	b.n	800462e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fecc 	bl	80043f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b08c      	sub	sp, #48	@ 0x30
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b22      	cmp	r3, #34	@ 0x22
 800467c:	f040 80ae 	bne.w	80047dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004688:	d117      	bne.n	80046ba <UART_Receive_IT+0x50>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d113      	bne.n	80046ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	1c9a      	adds	r2, r3, #2
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80046b8:	e026      	b.n	8004708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046cc:	d007      	beq.n	80046de <UART_Receive_IT+0x74>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <UART_Receive_IT+0x82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e008      	b.n	80046fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004718:	2b00      	cmp	r3, #0
 800471a:	d15d      	bne.n	80047d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0220 	bic.w	r2, r2, #32
 800472a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800473a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	2b01      	cmp	r3, #1
 8004760:	d135      	bne.n	80047ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	613b      	str	r3, [r7, #16]
   return(result);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004788:	623a      	str	r2, [r7, #32]
 800478a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69f9      	ldr	r1, [r7, #28]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	61bb      	str	r3, [r7, #24]
   return(result);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d10a      	bne.n	80047c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fe2a 	bl	8004420 <HAL_UARTEx_RxEventCallback>
 80047cc:	e002      	b.n	80047d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fd5e 	bl	8001290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e002      	b.n	80047de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3730      	adds	r7, #48	@ 0x30
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b0c0      	sub	sp, #256	@ 0x100
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	68d9      	ldr	r1, [r3, #12]
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	ea40 0301 	orr.w	r3, r0, r1
 8004810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	431a      	orrs	r2, r3
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004840:	f021 010c 	bic.w	r1, r1, #12
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800484e:	430b      	orrs	r3, r1
 8004850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004862:	6999      	ldr	r1, [r3, #24]
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	ea40 0301 	orr.w	r3, r0, r1
 800486e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b8f      	ldr	r3, [pc, #572]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d005      	beq.n	8004888 <UART_SetConfig+0xa0>
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b8d      	ldr	r3, [pc, #564]	@ (8004ab8 <UART_SetConfig+0x2d0>)
 8004884:	429a      	cmp	r2, r3
 8004886:	d104      	bne.n	8004892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7ff fa9a 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 800488c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004890:	e003      	b.n	800489a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004892:	f7ff fa81 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a4:	f040 810c 	bne.w	8004ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	1891      	adds	r1, r2, r2
 80048c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048c2:	415b      	adcs	r3, r3
 80048c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048ca:	4621      	mov	r1, r4
 80048cc:	eb12 0801 	adds.w	r8, r2, r1
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb43 0901 	adc.w	r9, r3, r1
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ea:	4690      	mov	r8, r2
 80048ec:	4699      	mov	r9, r3
 80048ee:	4623      	mov	r3, r4
 80048f0:	eb18 0303 	adds.w	r3, r8, r3
 80048f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048f8:	462b      	mov	r3, r5
 80048fa:	eb49 0303 	adc.w	r3, r9, r3
 80048fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800490e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004916:	460b      	mov	r3, r1
 8004918:	18db      	adds	r3, r3, r3
 800491a:	653b      	str	r3, [r7, #80]	@ 0x50
 800491c:	4613      	mov	r3, r2
 800491e:	eb42 0303 	adc.w	r3, r2, r3
 8004922:	657b      	str	r3, [r7, #84]	@ 0x54
 8004924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800492c:	f7fc f912 	bl	8000b54 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4b61      	ldr	r3, [pc, #388]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004936:	fba3 2302 	umull	r2, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	011c      	lsls	r4, r3, #4
 800493e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800494c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	1891      	adds	r1, r2, r2
 8004956:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004958:	415b      	adcs	r3, r3
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004960:	4641      	mov	r1, r8
 8004962:	eb12 0a01 	adds.w	sl, r2, r1
 8004966:	4649      	mov	r1, r9
 8004968:	eb43 0b01 	adc.w	fp, r3, r1
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800497c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004980:	4692      	mov	sl, r2
 8004982:	469b      	mov	fp, r3
 8004984:	4643      	mov	r3, r8
 8004986:	eb1a 0303 	adds.w	r3, sl, r3
 800498a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800498e:	464b      	mov	r3, r9
 8004990:	eb4b 0303 	adc.w	r3, fp, r3
 8004994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049ac:	460b      	mov	r3, r1
 80049ae:	18db      	adds	r3, r3, r3
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b2:	4613      	mov	r3, r2
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049c2:	f7fc f8c7 	bl	8000b54 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <UART_SetConfig+0x2d4>)
 80049ce:	fba3 2301 	umull	r2, r3, r3, r1
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2264      	movs	r2, #100	@ 0x64
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	1acb      	subs	r3, r1, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049e2:	4b36      	ldr	r3, [pc, #216]	@ (8004abc <UART_SetConfig+0x2d4>)
 80049e4:	fba3 2302 	umull	r2, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049f0:	441c      	add	r4, r3
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a14:	4641      	mov	r1, r8
 8004a16:	1851      	adds	r1, r2, r1
 8004a18:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	00cb      	lsls	r3, r1, #3
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a36:	4651      	mov	r1, sl
 8004a38:	00ca      	lsls	r2, r1, #3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4642      	mov	r2, r8
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a68:	460b      	mov	r3, r1
 8004a6a:	18db      	adds	r3, r3, r3
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a6e:	4613      	mov	r3, r2
 8004a70:	eb42 0303 	adc.w	r3, r2, r3
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a7e:	f7fc f869 	bl	8000b54 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	@ 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	3332      	adds	r3, #50	@ 0x32
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f003 0207 	and.w	r2, r3, #7
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4422      	add	r2, r4
 8004aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ab0:	e106      	b.n	8004cc0 <UART_SetConfig+0x4d8>
 8004ab2:	bf00      	nop
 8004ab4:	40011000 	.word	0x40011000
 8004ab8:	40011400 	.word	0x40011400
 8004abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	6239      	str	r1, [r7, #32]
 8004ada:	415b      	adcs	r3, r3
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	1854      	adds	r4, r2, r1
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	eb43 0501 	adc.w	r5, r3, r1
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	00eb      	lsls	r3, r5, #3
 8004af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afa:	00e2      	lsls	r2, r4, #3
 8004afc:	4614      	mov	r4, r2
 8004afe:	461d      	mov	r5, r3
 8004b00:	4643      	mov	r3, r8
 8004b02:	18e3      	adds	r3, r4, r3
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b08:	464b      	mov	r3, r9
 8004b0a:	eb45 0303 	adc.w	r3, r5, r3
 8004b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b2e:	4629      	mov	r1, r5
 8004b30:	008b      	lsls	r3, r1, #2
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b38:	4621      	mov	r1, r4
 8004b3a:	008a      	lsls	r2, r1, #2
 8004b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b40:	f7fc f808 	bl	8000b54 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4b60      	ldr	r3, [pc, #384]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	011c      	lsls	r4, r3, #4
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	61b9      	str	r1, [r7, #24]
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	6139      	str	r1, [r7, #16]
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ba8:	464b      	mov	r3, r9
 8004baa:	460a      	mov	r2, r1
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bcc:	4649      	mov	r1, r9
 8004bce:	008b      	lsls	r3, r1, #2
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	008a      	lsls	r2, r1, #2
 8004bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bde:	f7fb ffb9 	bl	8000b54 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	4b38      	ldr	r3, [pc, #224]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004bea:	fba3 2301 	umull	r2, r3, r3, r1
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2264      	movs	r2, #100	@ 0x64
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	1acb      	subs	r3, r1, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	@ 0x32
 8004bfc:	4a33      	ldr	r2, [pc, #204]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c08:	441c      	add	r4, r3
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c12:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	415b      	adcs	r3, r3
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c28:	4641      	mov	r1, r8
 8004c2a:	1851      	adds	r1, r2, r1
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	4649      	mov	r1, r9
 8004c30:	414b      	adcs	r3, r1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c40:	4659      	mov	r1, fp
 8004c42:	00cb      	lsls	r3, r1, #3
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	00ca      	lsls	r2, r1, #3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	4642      	mov	r2, r8
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	eb42 0303 	adc.w	r3, r2, r3
 8004c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	008b      	lsls	r3, r1, #2
 8004c80:	4641      	mov	r1, r8
 8004c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c86:	4641      	mov	r1, r8
 8004c88:	008a      	lsls	r2, r1, #2
 8004c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c8e:	f7fb ff61 	bl	8000b54 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	@ 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	3332      	adds	r3, #50	@ 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ccc:	51eb851f 	.word	0x51eb851f

08004cd0 <memset>:
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d100      	bne.n	8004cda <memset+0xa>
 8004cd8:	4770      	bx	lr
 8004cda:	f803 1b01 	strb.w	r1, [r3], #1
 8004cde:	e7f9      	b.n	8004cd4 <memset+0x4>

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1b64      	subs	r4, r4, r5
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2600      	movs	r6, #0
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f000 f894 	bl	8004e20 <_init>
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08004e58 	.word	0x08004e58
 8004d1c:	08004e58 	.word	0x08004e58
 8004d20:	08004e58 	.word	0x08004e58
 8004d24:	08004e5c 	.word	0x08004e5c

08004d28 <floor>:
 8004d28:	ec51 0b10 	vmov	r0, r1, d0
 8004d2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004d38:	2e13      	cmp	r6, #19
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	4680      	mov	r8, r0
 8004d40:	dc34      	bgt.n	8004dac <floor+0x84>
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	da17      	bge.n	8004d76 <floor+0x4e>
 8004d46:	a332      	add	r3, pc, #200	@ (adr r3, 8004e10 <floor+0xe8>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fa42 	bl	80001d4 <__adddf3>
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	f7fb fe84 	bl	8000a60 <__aeabi_dcmpgt>
 8004d58:	b150      	cbz	r0, 8004d70 <floor+0x48>
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	da55      	bge.n	8004e0a <floor+0xe2>
 8004d5e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004d62:	432c      	orrs	r4, r5
 8004d64:	2500      	movs	r5, #0
 8004d66:	42ac      	cmp	r4, r5
 8004d68:	4c2b      	ldr	r4, [pc, #172]	@ (8004e18 <floor+0xf0>)
 8004d6a:	bf08      	it	eq
 8004d6c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	e023      	b.n	8004dbe <floor+0x96>
 8004d76:	4f29      	ldr	r7, [pc, #164]	@ (8004e1c <floor+0xf4>)
 8004d78:	4137      	asrs	r7, r6
 8004d7a:	ea01 0307 	and.w	r3, r1, r7
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	d01d      	beq.n	8004dbe <floor+0x96>
 8004d82:	a323      	add	r3, pc, #140	@ (adr r3, 8004e10 <floor+0xe8>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fa24 	bl	80001d4 <__adddf3>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f7fb fe66 	bl	8000a60 <__aeabi_dcmpgt>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d0eb      	beq.n	8004d70 <floor+0x48>
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	bfbe      	ittt	lt
 8004d9c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004da0:	4133      	asrlt	r3, r6
 8004da2:	18e4      	addlt	r4, r4, r3
 8004da4:	ea24 0407 	bic.w	r4, r4, r7
 8004da8:	2500      	movs	r5, #0
 8004daa:	e7e1      	b.n	8004d70 <floor+0x48>
 8004dac:	2e33      	cmp	r6, #51	@ 0x33
 8004dae:	dd0a      	ble.n	8004dc6 <floor+0x9e>
 8004db0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004db4:	d103      	bne.n	8004dbe <floor+0x96>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	f7fb fa0b 	bl	80001d4 <__adddf3>
 8004dbe:	ec41 0b10 	vmov	d0, r0, r1
 8004dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004dca:	f04f 37ff 	mov.w	r7, #4294967295
 8004dce:	40df      	lsrs	r7, r3
 8004dd0:	4207      	tst	r7, r0
 8004dd2:	d0f4      	beq.n	8004dbe <floor+0x96>
 8004dd4:	a30e      	add	r3, pc, #56	@ (adr r3, 8004e10 <floor+0xe8>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb f9fb 	bl	80001d4 <__adddf3>
 8004dde:	2200      	movs	r2, #0
 8004de0:	2300      	movs	r3, #0
 8004de2:	f7fb fe3d 	bl	8000a60 <__aeabi_dcmpgt>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d0c2      	beq.n	8004d70 <floor+0x48>
 8004dea:	2c00      	cmp	r4, #0
 8004dec:	da0a      	bge.n	8004e04 <floor+0xdc>
 8004dee:	2e14      	cmp	r6, #20
 8004df0:	d101      	bne.n	8004df6 <floor+0xce>
 8004df2:	3401      	adds	r4, #1
 8004df4:	e006      	b.n	8004e04 <floor+0xdc>
 8004df6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	40b3      	lsls	r3, r6
 8004dfe:	441d      	add	r5, r3
 8004e00:	4545      	cmp	r5, r8
 8004e02:	d3f6      	bcc.n	8004df2 <floor+0xca>
 8004e04:	ea25 0507 	bic.w	r5, r5, r7
 8004e08:	e7b2      	b.n	8004d70 <floor+0x48>
 8004e0a:	2500      	movs	r5, #0
 8004e0c:	462c      	mov	r4, r5
 8004e0e:	e7af      	b.n	8004d70 <floor+0x48>
 8004e10:	8800759c 	.word	0x8800759c
 8004e14:	7e37e43c 	.word	0x7e37e43c
 8004e18:	bff00000 	.word	0xbff00000
 8004e1c:	000fffff 	.word	0x000fffff

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
